c
@comment.errors.map do |v|
        p v[v.attribute.to_sym]
      end
@comment.errors.map do |v|
        p v.attribute
      end
@comment.errors.map do |v|
        p v
      end
@comment.errors do |v|
        p v
      end
@comment.errors do |v|
        v
      end
@comment.errors do |v|
        v.attribute
      end
@comment.errors do |v|
        p "#{PostComment.human_attribute_name(v.attribute)} #{v[v.attribute.to_sym]}"
      end
@comment.errors do |v|
        p "#{PostComment.human_attribute_name(v.attribute)} #{v[v.attribute.to_sym]}"
      end.join('\n')
c
@comment.errors do |v| {v}
@comment.errors
@comment.errors[:content]
@comment.errors[0]
@comment.errors
@comment.errors.map do |k,v|
        p k,v
      end
@comment.errors.map do |k,v|
        p "#{PostComment.human_attribute_name(k)} #{v.to_s}"
      end.join('\n')
@comment.errors.map do |k,v| { k,v }
@comment.errors.map do |k,v| { (k,v) }
@comment.errors.map do |k,v| \n (k,v) \n  end
@comment.errors.map do |k,v|(k,v) end
@comment.errors.map do |k,v| (k,v) end
@comment.errors.map
@comment.errors.map do |k,v|
   10:         p "#{PostComment.human_attribute_name(k)} #{v.to_s}"
   11:       end.join('\n')
c
post_path(post)
c
@comment==true
@comment
c
@comment.errors
@comment
c
@comment
c
@post
c
n
c
new_post_path
c
post
params
c
n
new_post.errors
new_post.valid?
c
values[:parent_id].empty? ? nil : PostComment.find(values[:parent_id])
n
Post.find(params.require(:post_id))
n
params.require(:post_comment).permit(:parent_id, :content)
c
redirect_to posts_path(new_post.id)
new_post = Post.create(params_permited)
params_permited['creator']=current_user
params_permited['status']='published'
params_permited=params.require(:post).permit(%i[title body category_id]).to_h
new_post = Post.create(params_permited)
params_permited['creator']=current_user
Post.create(params_permited)
params_permited['creator']=current_user.id
params_permited['creator']=curent_user.id
current_user
new_post.errors
new_post.error
new_post.valid?
Category.all
Categolies.all
n
params_permited
n
params
c
self.params
params
self.params
self
request
params
request.params.require
request.params
params=request.params.require(:post).permit(%i[title, body, category_id])
request.params
request
params
c
—Å
params
c
request.headers.env.select { |k,v| k.start_with?('HTTP_') }
self.class.mimes_for_respond_to
request.format
respond_with(user, location: root_path)
root_path
user.email
location
user
c
n
Post.find(params.require(:id))
params
c
n
parent
post
values
n
c
PostComment.create!(parent: parent, post: post, creator: @current_user, content: values[:content])
PostComment.create!(parent: parent, post: post, creator: @current_user, content:value[:content])
parent
n
c
e
n
c
parent = values[:parent_id].integer? ? PostCommentc.find(values[:parent_id]) : nil
parent = values[:parent_id].integer? ? PostComment.find(values[:parent_id]) : nil
parent
n
c
parent_id
n
c
values
n
c
params
e
n
c
PostComment.create!(value)
value = {parent: parent_comment, post_id: post.id, creator: @current_user.id, content:"asdasdasdasdasd"}
parent_comment = post.post_comment.first
post = Post.find(params.require(:post_id))
PostComment
PostComments
debug q
q.errors
q.parent_id
q.parent_id = "3"
q.parent_id
q.errors
q.valid?
q.parent_id = "3"
q.parent_id = "/3/4/"
q.parent_id = "/3/4"
q.parent_id = "/3//4
q.parent_id = "\/3\/"
q.errors
pp q
q
q.save!
q.save
q = x.children.new(post_id:1, creator_id: 1, content:'asdasd')
x.children.new
x = PostComment.find(3)
x
x.children.new
value
post.post_comment.create!(value)
value[:parent] = z
value = value.except :parent_id
value
value = value.to_h
z = PostComment.find(3)
x.save!
x.save
x
x = post.post_comment.new(value.to_h)
z.parent_id
z = post.post_comment.new(value.to_h)
value.to_h
value
z = post.post_comment.new(value)
post
value
post.post_comment.create!(value.to_h)
value[:parent_id] = value[:parent_id].to_i
post.post_comment.create!(value.to_h)
value
value[:parent_id] = value[:parent_id].scan(/.*(\d+)\/$/).last.first
"/1/2/3/4/".scan /.*(\d+)\/$/
"/1/2/3/4/"[/.*(\d+)\/$/]
value[:parent_id][/.*(\d+)\/$/]
value[:parent_id][.*(\d+)$/]
value[:parent_id][.*(\d+)\/$/]
value[:parent_id][/(\d+)\/$/]
value[:parent_id][/(\d+)\/?$/]
value[:parent_id][//(\d+)\/?$//,0]
value[:parent_id][//(\d+)\/?$//,1]
value[:parent_id][/(\d+)\/?$/]
value[:parent_id][//(\d+)\/?$//]
z.parent_id='3'
z.parent_id='/3/'
z = post.post_comment.new
post.post_comment.new(value.to_h)
PostComment.all
post.post_comment.create!(value.to_h)
value
n
c
post.post_comment.create!(value.to_h)
value
value[:parent_id]='/3'
post.post_comment.create!(value.to_h)
value
n
c
n
c
parent.children.new
c
z.children.new
z.children
z = PostComment.take
parent.children.new
PostComment.all
PostComment.update_all(parent_id:nil)
PostComment.update_all(parent_id=nil)
PostComment.all
parent.children.new
parent
c
z.errors.to_h
pp z.errors
debug z.errors
z.errors.
z.errors.to_s
z.errors.to_S
z.errors
z.valid?
